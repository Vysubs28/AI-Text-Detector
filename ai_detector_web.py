import streamlit as st
import torch
import torch.nn.functional as F
from transformers import AutoTokenizer, AutoModelForSequenceClassification, GPT2Tokenizer, GPT2LMHeadModel
import math

# Device setup
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Load AI detector model (RoBERTa)
@st.cache_resource(show_spinner=False)
def load_detector():
    model_name = "roberta-base-openai-detector"
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name)
    model.to(device)
    model.eval()
    return tokenizer, model

# Load GPT-2 for perplexity
@st.cache_resource(show_spinner=False)
def load_gpt2():
    tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
    model = GPT2LMHeadModel.from_pretrained("gpt2")
    model.to(device)
    model.eval()
    return tokenizer, model

# Classifier-based AI probability
def detect_ai(text, tokenizer, model):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, max_length=512).to(device)
    with torch.no_grad():
        outputs = model(**inputs)
        probs = F.softmax(outputs.logits, dim=1)
        ai_prob = probs[0, 1].item() * 100
    return ai_prob

# Perplexity score (lower = more AI-like)
def calculate_perplexity(text, tokenizer, model):
    encodings = tokenizer(text, return_tensors="pt")
    input_ids = encodings.input_ids.to(device)
    with torch.no_grad():
        outputs = model(input_ids, labels=input_ids)
        neg_log_likelihood = outputs.loss.item() * input_ids.size(1)
    perplexity = math.exp(neg_log_likelihood / input_ids.size(1))
    return perplexity

# Combine scores
def combine_scores(ai_prob, perplexity):
    # Normalize perplexity between 10‚Äì100 range
    perplexity_score = max(min((100 - perplexity), 100), 0)
    combined = (ai_prob * 0.7) + (perplexity_score * 0.3)
    return combined

# Main app
def main():
    st.set_page_config(page_title="AI Text Detector", page_icon="ü§ñ", layout="centered")

    st.markdown(
        """
        <style>
            .title {
                font-size: 36px;
                font-weight: bold;
                text-align: center;
            }
            .stTextArea textarea {
                font-size: 16px;
                border-radius: 8px;
                padding: 12px;
            }
            .stButton>button {
                background-color: #4CAF50;
                color: white;
                font-size: 18px;
                padding: 10px 20px;
                border-radius: 8px;
            }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.markdown('<div class="title">ü§ñ AI Text Detector</div>', unsafe_allow_html=True)
    st.write("This tool uses AI models to analyze whether text is likely written by a human or generated by an AI.")

    detector_tokenizer, detector_model = load_detector()
    gpt2_tokenizer, gpt2_model = load_gpt2()

    user_input = st.text_area("Paste your text here:", height=200)
    MIN_LEN = 20

    if st.button("Analyze Text"):
        if len(user_input.strip()) < MIN_LEN:
            st.warning(f"Please enter at least {MIN_LEN} characters for better accuracy.")
            return

        with st.spinner("Analyzing text..."):
            ai_prob = detect_ai(user_input, detector_tokenizer, detector_model)
            perplexity = calculate_perplexity(user_input, gpt2_tokenizer, gpt2_model)
            combined_score = combine_scores(ai_prob, perplexity)

        st.markdown("---")
        st.subheader("üß† Detection Results")
        st.write(f"**AI Detector Model Confidence:** `{ai_prob:.2f}%`")
        st.write(f"**GPT-2 Perplexity:** `{perplexity:.2f}` *(lower = more AI-like)*")
        st.write(f"**Combined AI-likelihood Score:** `{combined_score:.2f}%`")
        st.progress(min(int(combined_score), 100))

        if combined_score > 60:
            st.error("‚ö†Ô∏è This text is likely AI-generated.")
        elif combined_score > 40:
            st.info("üîç This text may be either AI or human-written.")
        else:
            st.success("‚úÖ This text is likely human-written.")

if __name__ == "__main__":
    main()

